sort doorStatus = struct open | closed;
	onOffStatus = struct on | off;
	lightColor = struct green | red | yellow;
	lockArmStatus = struct fixed | loose;
	lockArmPosition = struct horizontal | vertical | inBetween;
	timerCallers = struct button | lockArm | server | led;
	lightArray =	lightColor -> onOffStatus;
	timeArray = timerCallers -> onOffStatus;

act pressEnable, sensorEnable, sensorDisable;
	lockArm, unlockArm, sendUnlockArm, getUnlockArm;
	sendForgetCard, getForgetCard, forgetCard;
	sendTimerOn, sendTimerOff, getTimerOn, getTimerOff, timerOff, timerOn: timerCallers;
	serverSend: Nat;
	serverOpenCommand;
	serverReceive: Bool;
	whereIsDoor: doorStatus;
	whereIsLockArm, lockArmPositionRequest, lockArmPositionAnswer: lockArmPosition;
	lockArmStatusRequest, lockArmStatusAnswer, howIsLockArm: lockArmStatus;
	cardRead: Nat;
	sendLedOn, getLedOn, ledOn, getLedOff, sendLedOff, ledOff: lightColor;

map maxUser: Nat;

eqn maxUser = 3;

	
proc lightControl(leds: lightArray) = sum c:lightColor.(getTimerOff(led).lightControl(leds[c->off]) + getLedOff(c).lightControl(leds[c->off])) + sum c:lightColor.getLedOn(c).lightControl(leds[c->on]);
	


	doorAndLockControl(doorStat:doorStatus,lockPos:lockArmPosition,lockStat:lockArmStatus) = lockArmStatusAnswer(lockStat).doorAndLockControl(doorStat,lockPos,lockStat) + 
	(lockArmPositionAnswer(lockPos).doorAndLockControl(doorStat,lockPos,lockStat)) + 
	((lockStat==fixed)->(getUnlockArm.doorAndLockControl(doorStat,lockPos,loose))) +
	((lockStat==loose)->(
		((lockPos==horizontal)->(whereIsLockArm(vertical).lockArm.sendForgetCard.sendLedOff(yellow).sendLedOff(red).doorAndLockControl(doorStat,vertical,fixed))) + 
		((lockPos==vertical)->(((doorStat==closed)->(whereIsLockArm(horizontal).lockArm.doorAndLockControl(closed,horizontal,fixed))))) + 
		getTimerOff(lockArm).whereIsLockArm(inBetween).sendLedOn(yellow).sendLedOn(red).doorAndLockControl(doorStat,lockPos,lockStat) + 
		getTimerOff(lockArm).lockArm.doorAndLockControl(doorStat,lockPos,fixed))) + 
	((lockPos==vertical)->(sum p:doorStatus.whereIsDoor(p).doorAndLockControl(p,vertical,fixed)));


	nfcController(ownerNumber:Nat,readerStatus:onOffStatus) = getForgetCard.nfcController(0,readerStatus) + 
	(sum s:lockArmStatus.lockArmStatusRequest(s).(s==fixed && readerStatus==off)->(
		(sum p:lockArmPosition.lockArmPositionRequest(p).(p==horizontal)->serverOpenCommand.sendUnlockArm.nfcController(0,readerStatus)) + 
		(pressEnable.sensorEnable.sendTimerOn(button).nfcController(ownerNumber,on)))) + 
	((readerStatus==on)->(
		sum n:Nat.(n<maxUser && n!=0)->(cardRead(n).sensorDisable.(ownerNumber==0)->(
			serverSend(n).sendTimerOn(server).(serverReceive(true).sendUnlockArm.nfcController(n,off) + 
			serverReceive(false).ledOn(red).timerOn(led).nfcController(ownerNumber,off) + 
			getTimerOff(server).ledOn(yellow).ledOn(red).nfcController(ownerNumber,off))) <>
			((n==ownerNumber)->sendUnlockArm.sendTimerOn(lockArm).ledOn(green).sendTimerOn(led).nfcController(ownerNumber,off) + 
			((n!=ownerNumber)->sendLedOn(red).sendTimerOn(led).nfcController(ownerNumber,off))) + 
		(getTimerOff(button).sensorDisable.nfcController(ownerNumber,off)))));

	timer(callers:timeArray) = sum c:timerCallers.getTimerOn(c).timer(callers[c->on]) + sum c:timerCallers.(callers(c)==on)->sendTimerOff(c).timer(callers[c->off]);

init allow({timerOn,timerOff,forgetCard,lockArm,unlockArm,ledOn,ledOff,pressEnable, sensorEnable, sensorDisable,serverSend,serverOpenCommand,serverReceive,whereIsDoor,whereIsLockArm,howIsLockArm,cardRead},
	 comm({sendTimerOn|getTimerOn -> timerOn,sendTimerOff|getTimerOff -> timerOff, sendForgetCard|getForgetCard -> forgetCard, sendUnlockArm|getUnlockArm -> unlockArm, sendLedOn|getLedOn -> ledOn, sendLedOff|getLedOff -> ledOff, lockArmStatusRequest|lockArmStatusAnswer -> howIsLockArm, lockArmPositionRequest|lockArmPositionAnswer -> whereIsLockArm},
	 lightControl(lambda c:lightColor. off) || doorAndLockControl(closed,vertical,fixed) || nfcController(0,off) || timer(lambda c:timerCallers. off)));