sort doorStatus = struct open | closed;
	lightStatus = struct on | off;
	lightColor = struct green | red | yellow;
	lockArmStatus = struct fixed | loose;
	lockArmPosition = struct horizontal | vertical | inBetween;
	lightArray =	lightColor -> lightStatus;	%Tracks the light status based on its color?

act lockArm, unlockArm, pressEnable, sensorEnable, sensorDisable, timerOff, timerOn,
	serverSend;
	serverReceive: Bool;
	isDoorClosed: doorStatus;
	isLockArmVertical: lockArmPosition;
	cardRead: Nat # Nat -> Bool;
	ledOn, ledOff: lightColor;
	%User Actions:
	openDoor,closeDoor,presentCard;


proc lightControl(leds: lightArray) = sum c:lightColor.(leds(c)!=on)->	 ledOn(c).lightControl(leds[c->on]) +
 sum c:lightColor .(leds(c)!=off)->	ledOff(c).lightControl(leds[c->off]);
	
	doorControl(status:doorStatus) = isDoorClosed(status).doorControl() +
	sum pos:lockArmPosition.isLockArmVertical(pos).(pos==vertical)->openDoor.doorControl(open);

	lockArmControl(status:lockArmStatus, position:lockArmPosition) = isLockArmVertical(position).lockArmControl();

	User = openDoor.User();

init lightControl(lambda c:lightColor. off) || doorControl(closed) || lockArmControl(fixed, vertical) || User();